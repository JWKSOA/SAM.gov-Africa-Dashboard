name: Update SAM.gov Database

on:
  schedule:
    # Run once daily at 04:30 UTC (handles DST automatically)
    - cron: "30 4 * * *"
  
  workflow_dispatch:
    inputs:
      run_bootstrap:
        description: "Run full historical bootstrap"
        required: false
        default: "false"
      cleanup_old:
        description: "Remove records older than 5 years"
        required: false
        default: "false"

permissions:
  contents: write
  actions: read

jobs:
  update-database:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    env:
      SAM_DATA_DIR: ${{ github.workspace }}/data
      PYTHONUNBUFFERED: "1"
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          lfs: false  # We'll handle LFS manually if needed
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install -r requirements.txt
      
      - name: Ensure data directory
        run: mkdir -p data
      
      - name: Check database size
        id: check-size
        run: |
          if [ -f data/opportunities.db ]; then
            SIZE=$(stat -c%s data/opportunities.db 2>/dev/null || stat -f%z data/opportunities.db)
            SIZE_MB=$((SIZE / 1048576))
            echo "Database size: ${SIZE_MB} MB"
            echo "db_size_mb=${SIZE_MB}" >> $GITHUB_OUTPUT
            
            # Setup Git LFS if database is large
            if [ $SIZE_MB -gt 50 ]; then
              echo "Database > 50MB, using Git LFS"
              git lfs install
              git lfs track "*.db"
              git add .gitattributes || true
              echo "use_lfs=true" >> $GITHUB_OUTPUT
            else
              echo "use_lfs=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Database not found"
            echo "db_size_mb=0" >> $GITHUB_OUTPUT
            echo "use_lfs=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Run historical bootstrap (if requested or first run)
        if: github.event.inputs.run_bootstrap == 'true' || steps.check-size.outputs.db_size_mb == '0'
        run: |
          echo "Running historical bootstrap..."
          python bootstrap_historical.py
        continue-on-error: false
      
      - name: Run daily update
        if: github.event.inputs.run_bootstrap != 'true'
        run: |
          echo "Running daily incremental update..."
          if [ "${{ github.event.inputs.cleanup_old }}" == "true" ]; then
            python download_and_update.py --cleanup
          else
            python download_and_update.py
          fi
        continue-on-error: false
      
      - name: Verify database integrity
        run: |
          python -c "
          import sqlite3
          import sys
          from pathlib import Path
          
          db_path = Path('data/opportunities.db')
          if not db_path.exists():
              print('ERROR: Database not found after update')
              sys.exit(1)
          
          conn = sqlite3.connect(db_path)
          cur = conn.cursor()
          
          # Check integrity
          cur.execute('PRAGMA integrity_check')
          result = cur.fetchone()[0]
          if result != 'ok':
              print(f'ERROR: Database integrity check failed: {result}')
              sys.exit(1)
          
          # Get statistics
          cur.execute('SELECT COUNT(*) FROM opportunities')
          count = cur.fetchone()[0]
          print(f'Database contains {count:,} records')
          
          # Check for recent data
          cur.execute('''
              SELECT COUNT(*) FROM opportunities 
              WHERE date(PostedDate) >= date('now', '-7 days')
          ''')
          recent = cur.fetchone()[0]
          print(f'Recent records (7 days): {recent:,}')
          
          conn.close()
          
          if count == 0:
              print('ERROR: Database is empty')
              sys.exit(1)
          "
      
      - name: Clean up temporary files
        run: |
          # Remove any CSV files (they shouldn't be committed)
          find data -name "*.csv" -type f -delete 2>/dev/null || true
          find data -name "*.zip" -type f -delete 2>/dev/null || true
          find data -name "*.gz" -type f -delete 2>/dev/null || true
          
          # Remove cache files
          rm -rf data/.cache/* 2>/dev/null || true
      
      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Add all changes
          git add -A
          
          # Check if there are changes
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            # Generate commit message with statistics
            STATS=$(python -c "
            import sqlite3
            from pathlib import Path
            from datetime import datetime
            
            db = Path('data/opportunities.db')
            if db.exists():
                conn = sqlite3.connect(db)
                cur = conn.cursor()
                cur.execute('SELECT COUNT(*) FROM opportunities')
                total = cur.fetchone()[0]
                cur.execute('''
                    SELECT COUNT(*) FROM opportunities 
                    WHERE date(PostedDate) >= date('now', '-1 days')
                ''')
                new = cur.fetchone()[0]
                conn.close()
                print(f'{total} total, {new} new today')
            else:
                print('Database update')
            ")
            
            TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
            git commit -m "Update database [${TIMESTAMP}] - ${STATS}"
            
            # Push with retries
            for i in {1..3}; do
              if git push; then
                echo "Successfully pushed changes"
                break
              else
                echo "Push attempt $i failed, retrying..."
                sleep 5
              fi
            done
          fi
      
      - name: Upload artifacts (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: error-logs
          path: |
            *.log
            data/*.log
          retention-days: 7
      
      - name: Notify on failure
        if: failure()
        run: |
          echo "::error::Database update failed. Check the logs for details."
          
          # Could add Slack/email notification here
          # Example: curl -X POST ${{ secrets.SLACK_WEBHOOK }} -d '{"text":"SAM.gov update failed"}'

  cleanup-old-artifacts:
    runs-on: ubuntu-latest
    needs: update-database
    if: success()
    
    steps:
      - name: Cleanup old workflow runs
        uses: GitRML/delete-workflow-runs@main
        with:
          retain_days: 30
          keep_minimum_runs: 5