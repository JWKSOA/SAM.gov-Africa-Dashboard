name: Update SAM.gov Database

on:
  schedule:
    # Run daily at 2 AM EST (7 AM UTC)
    # SAM.gov updates overnight, so this captures new data
    - cron: "0 7 * * *"
  
  workflow_dispatch:
    inputs:
      lookback_days:
        description: "Number of days to look back for updates"
        required: false
        default: "14"
      force_update:
        description: "Force update even if already run today"
        required: false
        default: "false"

permissions:
  contents: write
  actions: read

jobs:
  update-database:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          lfs: true
      
      - name: Setup Git LFS
        run: |
          git lfs install
          git lfs pull
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas requests numpy
      
      - name: Create data directory
        run: mkdir -p data
      
      - name: Check database status
        id: check-db
        run: |
          if [ -f data/opportunities.db ]; then
            # Check if it's a real database or LFS pointer
            FILE_SIZE=$(stat -c%s data/opportunities.db)
            echo "Database file size: $FILE_SIZE bytes"
            
            if [ $FILE_SIZE -lt 1000 ]; then
              echo "Database is LFS pointer, pulling actual file..."
              git lfs pull --include="data/opportunities.db"
            fi
            
            # Verify it's a valid SQLite database
            python -c "
import sqlite3
import sys
try:
    conn = sqlite3.connect('data/opportunities.db')
    cur = conn.cursor()
    cur.execute('SELECT COUNT(*) FROM opportunities')
    count = cur.fetchone()[0]
    print(f'Database contains {count:,} records')
    conn.close()
except Exception as e:
    print(f'Database check failed: {e}')
    sys.exit(1)
            "
          else
            echo "No database found!"
            echo "Run bootstrap_historical.py locally first to create initial database"
            exit 1
          fi
      
      - name: Run daily update
        env:
          FORCE_UPDATE: ${{ github.event.inputs.force_update || 'false' }}
          LOOKBACK_DAYS: ${{ github.event.inputs.lookback_days || '14' }}
        run: |
          echo "Running daily update..."
          echo "Lookback days: $LOOKBACK_DAYS"
          echo "Force update: $FORCE_UPDATE"
          
          if [ "$FORCE_UPDATE" = "true" ]; then
            python download_and_update.py --lookback-days $LOOKBACK_DAYS --force
          else
            python download_and_update.py --lookback-days $LOOKBACK_DAYS
          fi
      
      - name: Verify update results
        run: |
          python -c "
import sqlite3
from datetime import datetime, timedelta

conn = sqlite3.connect('data/opportunities.db')
cur = conn.cursor()

# Check total records
cur.execute('SELECT COUNT(*) FROM opportunities')
total = cur.fetchone()[0]
print(f'Total records: {total:,}')

# Check recent records
today = datetime.now().date().isoformat()
cutoff_7 = (datetime.now().date() - timedelta(days=7)).isoformat()
cutoff_30 = (datetime.now().date() - timedelta(days=30)).isoformat()

cur.execute('''
    SELECT COUNT(*) FROM opportunities 
    WHERE PostedDate_normalized >= ? AND PostedDate_normalized <= ?
''', (cutoff_7, today))
recent_7 = cur.fetchone()[0]

cur.execute('''
    SELECT COUNT(*) FROM opportunities 
    WHERE PostedDate_normalized >= ? AND PostedDate_normalized <= ?
''', (cutoff_30, today))
recent_30 = cur.fetchone()[0]

print(f'Records from last 7 days: {recent_7:,}')
print(f'Records from last 30 days: {recent_30:,}')

# Show top countries
cur.execute('''
    SELECT PopCountry, COUNT(*) as cnt 
    FROM opportunities 
    GROUP BY PopCountry 
    ORDER BY cnt DESC 
    LIMIT 5
''')

print('\\nTop 5 countries:')
for country, count in cur.fetchall():
    print(f'  {country}: {count:,}')

conn.close()
          "
      
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Track database with Git LFS
        run: |
          # Ensure database is tracked by Git LFS
          git lfs track "data/*.db"
          git add .gitattributes
      
      - name: Commit and push changes
        run: |
          # Add all changes
          git add -A
          
          # Check if there are changes to commit
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            # Create commit message with timestamp
            TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M UTC")
            COMMIT_MSG="Automatic update [$TIMESTAMP]"
            
            # Check if any new records were added
            if [ -f daily_update_*.log ]; then
              NEW_RECORDS=$(grep "New records:" daily_update_*.log | tail -1 | grep -oE '[0-9]+' | tail -1 || echo "0")
              if [ "$NEW_RECORDS" != "0" ]; then
                COMMIT_MSG="$COMMIT_MSG - Added $NEW_RECORDS new opportunities"
              fi
            fi
            
            # Commit changes
            git commit -m "$COMMIT_MSG"
            
            # Push with LFS
            git lfs push origin main --all
            git push origin main
            
            echo "âœ… Changes pushed successfully"
          fi
      
      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: error-logs
          path: |
            *.log
            data/*.log
          retention-days: 7
      
      - name: Clean up logs
        if: always()
        run: |
          # Remove old log files to prevent repository bloat
          rm -f daily_update_*.log
          rm -f bootstrap.log