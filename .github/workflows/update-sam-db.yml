name: Update SAM.gov Database

on:
  schedule:
    # Run daily at midnight EST (5 AM UTC)
    - cron: "0 5 * * *"
  
  workflow_dispatch:
    inputs:
      lookback_days:
        description: "Number of days to look back"
        required: false
        default: "7"

permissions:
  contents: write
  actions: read

jobs:
  update-database:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          lfs: true  # Important: Fetch LFS files
      
      - name: Setup Git LFS
        run: |
          git lfs install
          git lfs pull
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Create data directory if needed
        run: mkdir -p data
      
      - name: Check database status
        id: check-db
        run: |
          if [ -f data/opportunities.db ]; then
            # Check if it's a real database or LFS pointer
            FILE_SIZE=$(stat -c%s data/opportunities.db 2>/dev/null || stat -f%z data/opportunities.db)
            echo "Database file size: $FILE_SIZE bytes"
            
            if [ $FILE_SIZE -lt 1000 ]; then
              echo "Database is LFS pointer, pulling actual file..."
              git lfs pull --include="data/opportunities.db"
            fi
            
            # Verify it's a valid SQLite database
            python -c "
import sqlite3
try:
    conn = sqlite3.connect('data/opportunities.db')
    cur = conn.cursor()
    cur.execute('SELECT COUNT(*) FROM opportunities')
    count = cur.fetchone()[0]
    print(f'Database contains {count:,} records')
    conn.close()
except Exception as e:
    print(f'Database check failed: {e}')
    exit(1)
            "
          else
            echo "No database found, will create new one"
          fi
      
      - name: Run daily update
        run: |
          echo "Running incremental update..."
          python download_and_update.py --lookback-days ${{ github.event.inputs.lookback_days || '7' }}
      
      - name: Verify update
        run: |
          python -c "
import sqlite3
from datetime import datetime, timedelta

conn = sqlite3.connect('data/opportunities.db')
cur = conn.cursor()

# Check total records
cur.execute('SELECT COUNT(*) FROM opportunities')
total = cur.fetchone()[0]
print(f'Total records: {total:,}')

# Check recent records
try:
    cutoff = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
    cur.execute('''
        SELECT COUNT(*) FROM opportunities 
        WHERE PostedDate_normalized >= ?
    ''', (cutoff,))
    recent = cur.fetchone()[0]
    print(f'Records from last 7 days: {recent:,}')
except:
    # Fallback if normalized column doesn't exist yet
    cur.execute('''
        SELECT COUNT(*) FROM opportunities 
        WHERE date(PostedDate) >= date('now', '-7 days')
    ''')
    recent = cur.fetchone()[0]
    print(f'Recent records (approx): {recent:,}')

conn.close()
          "
      
      - name: Commit changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Track database with Git LFS
          git lfs track "data/*.db"
          git add .gitattributes
          
          # Add changes
          git add -A
          
          # Check if there are changes
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M UTC")
            git commit -m "Update database [$TIMESTAMP]"
            
            # Push with LFS
            git lfs push origin main --all
            git push origin main
          fi
      
      - name: Upload artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: error-logs
          path: |
            *.log
            data/*.log
          retention-days: 7